---
# Fail the play if running on an unsupported platform
- name: Assert platform is supported
  tags: gitolite
  assert:
    that:
      - ansible_os_family in gitolite_supported_platform

- name: Detect initial --check mode
  tags: gitolite
  when:
    - ansible_check_mode
    - (ansible_local|default({})).gitolite is not defined
  set_fact:
    gitolite_fact_initial_checkmode: true


# manage installation of required packages
- name: Include platform specific vars
  tags: gitolite
  include_vars: "{{ ansible_os_family }}.yml"


- name: Install required packages for gitolite
  tags: gitolite
  become: true
  with_items: '{{ gitolite_package_list }}'
  package:
    state: '{{ util_package_state|default("installed") }}'
    name: "{{ item }}"


# create gitolite user and group
#   group
- name: Create gitolite group
  tags: gitolite
  become: true
  group:
    state: present
    system: true
    name: "{{ gitolite_user_group }}"

#   user
#
- name: Create gitolite user
  tags: gitolite
  become: true
  user:
    state: present
    generate_ssh_key: true
    createhome: true
    ssh_key_bits: 4096
    ssh_key_type: rsa
    ssh_key_comment: "Gitolite Service"
    name: '{{ gitolite_user_name }}'
    home: '{{ gitolite_user_home }}'
    group: '{{ gitolite_user_group }}'

# manage gitolite users' ssh configuration
- name: Install gitolite ssh configuration
  tags: gitolite
  become: true
  template:
    src: ssh_config.j2
    dest: '{{ gitolite_user_home }}/.ssh/config'
    mode: 0600
    owner: '{{ gitolite_user_name }}'
    group: '{{ gitolite_user_group }}'

# manage gitolite users' git configuration
- name: Install gitolite git configuration
  tags: gitolite
  become: true
  template:
    src: gitconfig.j2
    dest: '{{ gitolite_user_home }}/.gitconfig'
    mode: 0600
    owner: '{{ gitolite_user_name }}'
    group: '{{ gitolite_user_group }}'

- name: Install gitolite configuration
  tags: gitolite
  become: true
  notify: gitolite setup
  template:
    src: gitolite.rc.j2
    dest: '{{ gitolite_user_home }}/.gitolite.rc'
    mode: 0640
    owner: '{{ gitolite_user_name }}'
    group: '{{ gitolite_user_group }}'

- name: Install gitolite shell user list
  tags: gitolite
  become: true
  when: gitolite_gitoliterc_shell_user_list|count != 0
  template:
    src: gitolite.rc.shell_user.j2
    dest: '{{ gitolite_user_home }}/.gitolite.rc.shell_user'
    mode: 0640
    owner: '{{ gitolite_user_name }}'
    group: '{{ gitolite_user_group }}'

- name: Initialize gitolite
  tags: gitolite
  become: true
  become_user: '{{ gitolite_user_name }}'
  when: not gitolite_fact_initial_checkmode|default(false)
  command: 'gitolite setup -pk {{ gitolite_user_home }}/.ssh/id_rsa.pub'
  args:
    chdir: '{{ gitolite_user_home }}'
    creates: '{{ gitolite_user_home }}/.gitolite'


# configure smart-https for gitolite
#- include: https.yml
#  tags: gitolite
#  when: gitolite_https_enable


# manage gitolite installation
- name: Include admin configuration tasks
  tags: gitolite
  include: admin.yml
  when:
    - (gitolite_repositories + gitolite_repositories_custom)|count != 0
